name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build_all:
    name: Build, Lint and Run Everything
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix: { 
        dir: [
              "./collections/std_collections",
              "./error_handling/errors",
              "./initial_concepts/control_flow",
              "./initial_concepts/functions",
              "./initial_concepts/variables",
              "./organizing_code/packages_crates_modules",
              "./structs_and_enums/enums",
              "./structs_and_enums/structs",
              "./understanding_ownership/ownership_borrowing",
              "./understanding_ownership/slices",
              "./generics_traits_lifetimes/gtl",
              "./iterators_closures/closures",
              "./iterators_closures/iterators",
              "./organizing_code/cratesio_libraries",
              "./organizing_code/workspace_example/add"
            ]
      }
    defaults:
      run:
        working-directory: ${{ matrix.dir }}

    steps:
    - uses: actions/checkout@v4
    - name: Build
      run: cargo build -vv
    - name: Clippy
      run: cargo clippy
    - name: Run
      run: cargo run -vv
  
  build_minigrep:
    name: Build, Lint and Run Minigrep
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix: { 
        dir: [
          "./projects/minigrep",
          "./projects/minigrep_iter"
        ]
      }
    defaults:
      run:
        working-directory: ${{ matrix.dir }}

    steps:
    - uses: actions/checkout@v4
    - name: Build
      run: cargo build -vv
    - name: Clippy
      run: cargo clippy
    - name: Run
      run: cargo run -- to sample.txt
